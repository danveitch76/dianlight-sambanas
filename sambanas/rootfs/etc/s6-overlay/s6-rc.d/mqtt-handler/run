#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Start mqtt service
# ==============================================================================
if [ -f /root/.config/mosquitto_pub ]; then
    bashio::log.info "Starting the MQTT daemon for disks info..."

    # Send autodiscovery entities
    if ! bashio::config.true "mqtt_use_legacy_entities"; then

        topic=$(bashio::config 'mqtt_topic')
        if [ "$topic" = "null" ]; then topic="sambanas"; fi

        #        disks=$(awk 'BEGIN { ORS=""; print "["}  /^   path = .*/g {  printf "%s\"%s\"",separator,$3 ; separator=","  } END { print "]" } ' /etc/samba/smb.conf)
        disks=$(grep path /etc/samba/smb.conf | sed 's/.*path\ =\ //' | jq --raw-input --slurp 'split("\n") | map(select(. != ""))')
        blk=$(lsblk -b -no PARTUUID,NAME,LABEL,FSTYPE,MOUNTPOINTS -J -y)
        jdisks=$(jq --argjson disks "$disks" 'reduce (.blockdevices[].children[]? |select(.mountpoints? - $disks != .mountpoints) ) as $i ({};.[$i.name] = $i)' <<<${blk})

        # Send discovery messages.
        if ! bashio::config.true "autodiscovery.disable_persistent"; then prs="-r"; fi

        #bashio::log.info $device
        device=$(jq -r -c -n --arg topic $topic --arg smbv "$(smbd -V | sed s/Version\ //)" --arg addon "$(bashio::addon.version)" '
        {device:{
            identifiers:[],
            name: "SambaNas Disk ",
            hw_version: $addon,
            sw_version: $smbv,
            model: "SambaNas",
            manufacturer: "@Dianlight",
            via_device: $topic
        }}')

        for row in $(jq -r '.|map(.|@base64)|.[]' <<<$jdisks); do
            for entity in name label mountpoints fssize fsused fsuse_pct fsavail fstype iostat.tps iostat.kB_read/s iostat.kB_wrtn/s iostat.kB_dscd/s iostat.kB_read iostat.kB_wrtn iostat.kB_dscd; do
                exmsg={}
                etype=""

                base=$(jq --arg topic "$topic" --arg entity "$entity" -R '@base64d|fromjson|
                        {
                            name:($topic+" "+$entity +" "+ .label), 
                            unique_id:(.partuuid +"-"+ ($entity|explode|join(""))),
                            value_template:("{{ value_json." + .name + "." +$entity+ "}}"),
                            state_topic:($topic + "/state"),
                            oth:{
                                partuuid:.partuuid,
                                name:.name,
                                label:.label
                            }
                        }' <<<$row)

                case "$entity" in
                name | label | fstype | mountpoints) #TEXT
                    etype="sensor"
                    exmsg=$(jq --arg topic "$topic" --arg entity "$entity" -R '@base64d|fromjson|
                        {
                            mode: "text",
                            icon:"mdi:harddisk"
                        }' <<<$row)
                    ;;
                fssize | fsused | fsavail) #DATA_SIZE (Byte)
                    etype="sensor"
                    exmsg=$(jq --arg topic "$topic" --arg entity "$entity" -R '@base64d|fromjson|
                        {
                            unit_of_measurement: "B",
                            device_class: "data_size",
                        }' <<<$row)
                    ;;
                iostat.kB_read | iostat.kB_wrtn | iostat.kB_dscd) #DATA_SIZE (KB)
                    etype="sensor"
                    exmsg=$(jq --arg topic "$topic" --arg entity "$entity" -R '@base64d|fromjson|
                        {
                            unit_of_measurement: "kB",
                            device_class: "data_size",
                        }' <<<$row)
                    ;;
                iostat.kB_read/s | iostat.kB_wrtn/s | iostat.kB_dscd/s) #data_rate
                    etype="sensor"
                    exmsg=$(jq --arg topic "$topic" --arg entityb "${entity%.*}" --arg entityd "${entity##*.}" -R '@base64d|fromjson|
                        {
                            unit_of_measurement: "kB/s",
                            device_class: "data_rate",
                            value_template:("{{ value_json." + .name + "." +$entityb+ "['"'"'" + $entityd + "'"'"']}}"),
                            icon:"mdi:database-refresh"
                        }' <<<$row)
                    ;;
                iostat.tps) #TPS
                    etype="sensor"
                    exmsg=$(jq --arg topic "$topic" --arg entity "$entity" -R '@base64d|fromjson|
                        {
                            unit_of_measurement: "tps",
                            icon:"mdi:database-search"
                        }' <<<$row)
                    ;;
                fsuse_pct) # PERCENT
                    etype="sensor"
                    exmsg=$(jq --arg topic "$topic" --arg entity "$entity" -R '@base64d|fromjson|
                        {
                            _unit_of_measurement: "%",
                            icon:"mdi:database-eye"
                        }' <<<$row)
                    ;;
                *)
                    bashio::log.waring "Autodiscovery for $entity missing!"
                    ;;
                esac
                msg=$(echo $base $device $exmsg | jq -s 'add|.device.identifiers[.device.identifiers|length]=.oth.partuuid|.device.name=(.device.name + .oth.label)|del(.oth)')
                bashio::log.debug $msg
                mosquitto_pub ${prs} -t "homeassistant/${etype}/${topic}/$(jq -R -r '@base64d|fromjson|.partuuid' <<<$row)-${entity//[\.\/]/-}/config" -m "$msg"
            done
        done

        while true; do
            blk=$(lsblk -b -no NAME,LABEL,FSSIZE,FSUSED,FSUSE%,FSAVAIL,FSTYPE,MOUNTPOINTS -J -y)
            liostat=$(/usr/bin/iostat $(jq -r '.|map(.name)|.[]' <<<$jdisks) -k -d -o JSON)
            status=$(jq --argjson disks "$disks" --argjson iostat "$liostat" 'reduce (.blockdevices[].children[]? |select(.mountpoints? - $disks != .mountpoints) ) as $i ({};.[$i.name] = $i+{iostat:($iostat.sysstat.hosts[0].statistics[0].disk[] | select(.disk_device==$i.name))})' <<<${blk})
            # Send status message
            mosquitto_pub -t "${topic}/state" -m "$status"
            # Sleep
            sleep 2
        done

    else
        bashio::log.info "Legacy MQTT integration"
        exec /usr/local/bin/mqtt_daemon.sh
    fi

else

    ! bashio::config.false "mqtt_enable" && bashio::log.warning "No MQTT config with mqtt_enable option!"
    exec sleep infinity
fi
